<?php 

class Dot_Image 
{
    private $_path;  
    private $_hash;
    private $_type;
	/**
	 * sets the class instance variables
	 * 
	 * 
	 * @param String $path - path to the file
	 * @param String $hash - the hash of the new image, generated by generateShortUrl();
	 * @param String $type - MIME type of the file
	 */
    public function __construct($path, $hash, $type)
    {
        $this->_path = $path;
        $this->_hash = $hash;
        $this->_type = $type;
    }
    
    /**
     * Generates scaled images having different sizes and saves them on the disk
     * 
	 * @param Array $widthList - list of widths the function will generate and save in respective folders
	 * @return boolean true if all sizes have been saved succesfuly, false otherwise
	 */
    public function generateScaledImages($widthList)
    {
        list($originalWidth, $originalHeight) = getimagesize($this->_path);
        foreach($widthList as $width)   
        {  
            // calculating scaling ratio
            $ratio = $originalWidth / $width;

            // calculate new height 
            $height = $originalHeight / $ratio;

            // create source image from string
            $imgString = file_get_contents($this->_path);

            $image = imagecreatefromstring($imgString);

            // create a new empty image with the new dimensions and set the path
            $newImage = imagecreatetruecolor($width, $height);
            $newImagePath = UPLOADS_PATH . DIRECTORY_SEPARATOR . 'images' . DIRECTORY_SEPARATOR . $width . DIRECTORY_SEPARATOR . $this->_hash . '.png';

            // copy the original image to a new one
            imagecopyresampled($newImage, $image, 0, 0, 0, 0, $width, $height, $originalWidth, $originalHeight);

            $success = imagepng($newImage, $newImagePath, 9);
            
            if(!$success)
            { 
            	return false;
            }
        }
        return true;
    }
    
    /**
     * Checks if original image meets the minimum width requirement
     * 
     * @return boolean - true if valid image, false otherwise
     */
    public function checkImageWidth()
    {
        $imageWidth = getimagesize($this->_path)[0];

        if($imageWidth >= 200)
        {
            return true;
        }
        return false; 
    }

	/**
	 * Checks if original image has one of the allowed extensions
     * 
     * @return boolean - true if valid, false otherwise
	 */
    public function checkImageExtension()
    {
        // Determine the file extension based on file type
        switch($this->_type)
        {
            case 'image/jpeg': 
            	return 'jpg'; 
            	break;
            case 'image/png': 
            	return 'png'; 
            	break;
            default:
            	return false;
            	break;
        }
    }
}
